---
## Install
## Docs: https://launcher.fabric8.io/docs/minishift-installation.html

# Create project
- name: check if launcher project {{ project_name }} exists
  shell: "oc get project {{ project_name }}"
  register: launcher_project_result
  ignore_errors: true
  changed_when: false

- name: create project {{ project_name }}
  shell: "oc new-project {{ project_name }} --display-name='{{ project_display_name }}' --description='{{ project_desc }}'"
  when: launcher_project_result is failed

- name: assign user as project admin
  shell: "oc adm policy add-role-to-user admin {{ project_admin }} -n {{ project_name }}"
  ignore_errors: true
  when:
    - launcher_project_result is failed
    - project_admin is defined
    - project_admin is not none
    - project_admin|trim() != ""

- name: annotate project project {{ project_name }}
  shell: "oc annotate --overwrite namespace {{ project_name }} {{ project_annotations }}"
  ignore_errors: true
  when:
    - launcher_project_result is failed
    - project_annotations is defined
    - project_annotations is not none
    - project_annotations|trim() != ""

# Create Operator Service Account
- name: Create Operator Service Account
  k8s:
    state: present
    definition:
      apiVersion: v1
      kind: ServiceAccount
      metadata:
        name: launcher-operator
        namespace: "{{ project_name }}"

# Create Operator Service Account Role
- name: Create Operator Service Account Role
  k8s:
    state: present
    definition:
      apiVersion: rbac.authorization.k8s.io/v1
      kind: Role
      metadata:
        creationTimestamp: null
        name: launcher-operator
        namespace: "{{ project_name }}"
      rules:
      - apiGroups:
        - ""
        resources:
        - pods
        - services
        - endpoints
        - persistentvolumeclaims
        - events
        - configmaps
        - secrets
        - serviceaccounts
        - processedtemplates.template.openshift.io
        verbs:
        - '*'
      - apiGroups:
        - template.openshift.io
        resources:
        - processedtemplates
        verbs: [ get, list, create, update, delete, deletecollection, watch]
      - apiGroups:
        - ""
        - apps.openshift.io
        resources:
        - deploymentconfigs
        - deploymentconfigs/instantiate
        verbs: [ get, list, create, update, delete, deletecollection, watch]
      - apiGroups:
        - route.openshift.io
        resources:
        - routes
        - routes/custom-host
        verbs: [ get, list, create, update, delete, deletecollection, watch]
      - apiGroups:
        - ""
        resources:
        - namespaces
        verbs:
        - get
      - apiGroups:
        - apps
        resources:
        - deployments
        - daemonsets
        - replicasets
        - statefulsets
        verbs:
        - '*'
      - apiGroups:
        - monitoring.coreos.com
        resources:
        - servicemonitors
        verbs:
        - get
        - create
      - apiGroups:
        - launcher.fabric8.io
        resources:
        - '*'
        verbs:
        - '*'

# Create Operator Service Account Role Binding
- name: Create Operator Service Account Role Binding
  k8s:
    state: present
    definition:
      apiVersion: rbac.authorization.k8s.io/v1
      kind: RoleBinding
      metadata:
        name: launcher-operator
        namespace: "{{ project_name }}"
      subjects:
      - kind: ServiceAccount
        name: launcher-operator
      roleRef:
        kind: Role
        name: launcher-operator
        apiGroup: rbac.authorization.k8s.io

# Create Operator CRD
- name: Create Operator CRD
  k8s:
    state: present
    definition:
      apiVersion: apiextensions.k8s.io/v1beta1
      kind: CustomResourceDefinition
      metadata:
        name: launchers.launcher.fabric8.io
      spec:
        group: launcher.fabric8.io
        names:
          kind: Launcher
          listKind: LauncherList
          plural: launchers
          singular: launcher
        scope: Namespaced
        version: v1alpha2
        subresources:
          status: {}

# Create Operator Deployment
- name: Create Operator Deployment
  k8s:
    state: present
    definition:
      apiVersion: apps/v1
      kind: Deployment
      metadata:
        name: launcher-operator
        namespace: "{{ project_name }}"
      spec:
        replicas: 1
        selector:
          matchLabels:
            name: launcher-operator
        template:
          metadata:
            labels:
              name: launcher-operator
          spec:
            serviceAccountName: launcher-operator
            containers:
              - name: launcher-operator
                image: fabric8/launcher-operator:latest
                ports:
                - containerPort: 60000
                  name: metrics
                command:
                - launcher-operator
                imagePullPolicy: Always
                readinessProbe:
                  exec:
                    command:
                      - stat
                      - /tmp/operator-sdk-ready
                  initialDelaySeconds: 4
                  periodSeconds: 10
                  failureThreshold: 1
                env:
                  - name: WATCH_NAMESPACE
                    valueFrom:
                      fieldRef:
                        fieldPath: metadata.namespace
                  - name: POD_NAME
                    valueFrom:
                      fieldRef:
                        fieldPath: metadata.name
                  - name: OPERATOR_NAME
                    value: "launcher-operator"
                  - name: TEMPLATE_PATH
                    value: "/usr/local/bin/templates"

# Create Launcher CR
- name: Create Launcher CR
  k8s:
    state: present
    definition:
      apiVersion: launcher.fabric8.io/v1alpha2
      kind: Launcher
      metadata:
        name: launcher
        namespace: "{{ project_name }}"
      spec:
        openshift:
          apiUrl: https://openshift.default.svc.cluster.local
          consoleUrl: "{{ console_url }}"
        oauth:
          enabled: true
          url: "{{ oauth_url }}/oauth/authorize"
        git:
          providers:
          - id: GitHub
            clientId: "12"     # 12 dummy value
            clientSecret: "12" # 12 dummy value
            oauthUrl: "https://github.com/login/oauth/access_token"

# Get launcher route
- name: get launcher route
  shell: "oc get route {{ launcher_route_name }} -o jsonpath='{ .spec.host }' -n {{ project_name }}"
  register: launcher_route_output
  changed_when: false

- set_fact:
    launcher_route: "{{ launcher_route_output.stdout }}"

# Create OAuth Client secret
- name: Create OAuth Client secret
  k8s:
    state: present
    definition:
      apiVersion: v1
      kind: Secret
      metadata:
        name: launcher-oauth-github
        namespace: "{{ project_name }}"
      type: Opaque
      data:
        clientId: MTI= # 12 dummy value
        secret: MTI=   # 12 dummy value

# Create OAuthClient
- name: Create OAuthClient
  k8s:
    state: present
    definition:
      apiVersion: oauth.openshift.io/v1
      kind: OAuthClient
      metadata:
        name: launcher
      secret: launcher-oauth-github
      redirectURIs:
        - "https://{{ launcher_route }}"
      grantMethod: prompt

# Checking status of services
- name: wait for launcher to be running
  uri:
    validate_certs: false
    url: https://{{ launcher_route }}
    status_code: 200
  register: result
  until: result.status == 200
  retries: 30
  delay: 30
