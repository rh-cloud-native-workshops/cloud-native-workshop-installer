---
## Install
## Document: https://access.redhat.com/documentation/en-us/openshift_container_platform/4.2/html-single/serverless_applications/index#installing-openshift-serverless

# Deploy Serverless using an operator
- name: Create a Subscription of the OpenShift Serverless operator
  k8s:
    state: present
    definition:
      apiVersion: operators.coreos.com/v1alpha1
      kind: Subscription
      metadata:
        name: "{{ serverless_subsription_name }}"
        namespace: "{{ all_namespaces_project_name }}"
      spec:
        channel: "{{ serverless_subsription_channel }}"
        installPlanApproval: "{{ serverless_subsription_install_plan_approval }}"
        name: "{{ serverless_subsription_name }}"
        source: "{{ serverless_subsription_source }}"
        sourceNamespace: "{{ serverless_subsription_source_namespace }}"
        startingCSV: "{{ serverless_subsription_starting_csv }}"

# Checking status of the operator
- name: wait for serverless csv to be ready
  shell: "oc get csv -o json -n {{ all_namespaces_project_name }} | jq -r '.items[] | select(.metadata.name | contains(\"{{ serverless_subsription_csv_root }}\")) | .status.phase'"
  register: result
  until: result.stdout == 'Succeeded'
  retries: 30
  delay: 30

# Create Knative Serving namespace
- name: Create Knative Serving namespace
  k8s:
    state: present
    definition:
      apiVersion: v1
      kind: Namespace
      metadata:
        name: knative-serving

# Create a Knative Serving instance
- name: Create a Knative Serving instance for the OpenShift Serverless operator
  k8s:
    state: present
    definition:
      apiVersion: serving.knative.dev/v1alpha1
      kind: KnativeServing
      metadata:
        name: knative-serving
        namespace: knative-serving
      spec:
        config:
          autoscaler:
            container-concurrency-target-default: '100'
            container-concurrency-target-percentage: '1.0'
            enable-scale-to-zero: 'true'
            max-scale-up-rate: '10'
            panic-threshold-percentage: '200.0'
            panic-window: 6s
            panic-window-percentage: '10.0'
            scale-to-zero-grace-period: 30s
            stable-window: 60s
            tick-interval: 2s
          defaults:
            revision-cpu-limit: 1000m
            revision-cpu-request: 400m
            revision-memory-limit: 200M
            revision-memory-request: 100M
            revision-timeout-seconds: '300'
          deployment:
            registriesSkippingTagResolving: 'ko.local,dev.local'
          gc:
            stale-revision-create-delay: 24h
            stale-revision-lastpinned-debounce: 5h
            stale-revision-minimum-generations: '1'
            stale-revision-timeout: 15h
          logging:
            loglevel.activator: info
            loglevel.autoscaler: info
            loglevel.controller: info
            loglevel.queueproxy: info
            loglevel.webhook: info
          observability:
            logging.enable-var-log-collection: 'false'
            metrics.backend-destination: prometheus
          tracing:
            backend: none
            sample-rate: '0.1'

# Wait for knative serving to be ready 
- name: Wait for knative serving to be ready
  shell: "oc get knativeserving/knative-serving -n knative-serving --template={% raw %}'{{range .status.conditions}}{{if and (eq .type \"Ready\") (eq .status \"True\") }}Ready{{end}}{{end}}'{% endraw %}"
  register: result
  until: result.stdout == 'Ready'
  retries: 30
  delay: 30

# Deploy Knative Eventing using an operator
- name: Create a Subscription of the Knative Eventing operator
  k8s:
    state: present
    definition:
      apiVersion: operators.coreos.com/v1alpha1
      kind: Subscription
      metadata:
        name: "{{ knative_eventing_subsription_name }}"
        namespace: "{{ all_namespaces_project_name }}"
      spec:
        channel: "{{ knative_eventing_subsription_channel }}"
        installPlanApproval: "{{ knative_eventing_subsription_install_plan_approval }}"
        name: "{{ knative_eventing_subsription_name }}"
        source: "{{ knative_eventing_subsription_source }}"
        sourceNamespace: "{{ knative_eventing_subsription_source_namespace }}"
        startingCSV: "{{ knative_eventing_subsription_starting_csv }}"

# Checking status of the operator
- name: wait for knative eventing csv to be ready
  shell: "oc get csv -o json -n {{ all_namespaces_project_name }} | jq -r '.items[] | select(.metadata.name | contains(\"{{ knative_eventing_subsription_csv_root }}\")) | .status.phase'"
  register: result
  until: result.stdout == 'Succeeded'
  retries: 30
  delay: 30

# Wait for knative eventing to be ready 
- name: Wait for knative eventing to be ready
  shell: "oc get knativeeventing/knative-eventing -n knative-eventing --template={% raw %}'{{range .status.conditions}}{{if and (eq .type \"Ready\") (eq .status \"True\") }}Ready{{end}}{{end}}'{% endraw %}"
  register: result
  until: result.stdout == 'Ready'
  retries: 30
  delay: 30