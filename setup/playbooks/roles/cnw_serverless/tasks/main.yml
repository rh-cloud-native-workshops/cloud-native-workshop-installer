---
## Install

# Deploy Service Mesh using an operator
- name: Create a Subscription of the OpenShift Service Mesh operator
  k8s:
    state: present
    definition:
      apiVersion: operators.coreos.com/v1alpha1
      kind: Subscription
      metadata:
        name: "{{ servicemesh_subsription_name }}"
        namespace: "{{ all_namespaces_project_name }}"
      spec:
        channel: "{{ servicemesh_subsription_channel }}"
        installPlanApproval: "{{ servicemesh_subsription_install_plan_approval }}"
        name: "{{ servicemesh_subsription_name }}"
        source: "{{ servicemesh_subsription_source }}"
        sourceNamespace: "{{ servicemesh_subsription_source_namespace }}"
        startingCSV: "{{ servicemesh_subsription_starting_csv }}"

- name: wait for servicemesh csv to be ready
  shell: "oc get csv -o json -n {{ all_namespaces_project_name }} | jq -r '.items[] | select(.metadata.name | contains(\"{{ servicemesh_subsription_csv_root }}\")) | .status.phase'"
  register: result
  until: result.stdout == 'Succeeded'
  retries: 30
  delay: 30

- name: Create a Control Plane for the OpenShift Serverless operator
  k8s:
    state: present
    definition:
      apiVersion: maistra.io/v1
      kind: ServiceMeshControlPlane
      metadata:
        name: basic-install
        namespace: "{{ project_name }}"
      spec:
        istio:
          global:
            proxy:
              resources:
                requests:
                  cpu: 100m
                  memory: 128Mi
                limits:
                  cpu: 500m
                  memory: 128Mi
          gateways:
            istio-egressgateway:
              autoscaleEnabled: false
            istio-ingressgateway:
              autoscaleEnabled: false
          mixer:
            policy:
              autoscaleEnabled: false
            telemetry:
              autoscaleEnabled: false
              resources:
                requests:
                  cpu: 100m
                  memory: 1G
                limits:
                  cpu: 500m
                  memory: 4G
          pilot:
            autoscaleEnabled: false
            traceSampling: 100
          kiali:
            enabled: true
          grafana:
            enabled: true
          tracing:
            enabled: true
            jaeger:
              template: all-in-one

- name: Create a Control Plane for the OpenShift Serverless operator
  k8s:
    state: present
    definition:
      apiVersion: maistra.io/v1
      kind: ServiceMeshMemberRoll
      metadata:
        name: default
        namespace: "{{ project_name }}"
      spec:
        members:
          - coolstore-user1

# Deploy Serverless using an operator
- name: Create a Subscription of the OpenShift Serverless operator
  k8s:
    state: present
    definition:
      apiVersion: operators.coreos.com/v1alpha1
      kind: Subscription
      metadata:
        name: "{{ serverless_subsription_name }}"
        namespace: "{{ all_namespaces_project_name }}"
      spec:
        channel: "{{ serverless_subsription_channel }}"
        installPlanApproval: "{{ serverless_subsription_install_plan_approval }}"
        name: "{{ serverless_subsription_name }}"
        source: "{{ serverless_subsription_source }}"
        sourceNamespace: "{{ serverless_subsription_source_namespace }}"
        startingCSV: "{{ serverless_subsription_starting_csv }}"

- name: Create a KNative Serving instance for the OpenShift Serverless operator
  k8s:
    state: present
    definition:
      apiVersion: serving.knative.dev/v1alpha1
      kind: KnativeServing
      metadata:
        name: knative-serving
        namespace: "{{ project_name }}"
      spec:
        config:
          autoscaler:
            container-concurrency-target-default: '100'
            container-concurrency-target-percentage: '1.0'
            enable-scale-to-zero: 'true'
            max-scale-up-rate: '10'
            panic-threshold-percentage: '200.0'
            panic-window: 6s
            panic-window-percentage: '10.0'
            scale-to-zero-grace-period: 30s
            stable-window: 60s
            tick-interval: 2s
          defaults:
            revision-cpu-limit: 1000m
            revision-cpu-request: 400m
            revision-memory-limit: 200M
            revision-memory-request: 100M
            revision-timeout-seconds: '300'
          deployment:
            registriesSkippingTagResolving: 'ko.local,dev.local'
          gc:
            stale-revision-create-delay: 24h
            stale-revision-lastpinned-debounce: 5h
            stale-revision-minimum-generations: '1'
            stale-revision-timeout: 15h
          logging:
            loglevel.activator: info
            loglevel.autoscaler: info
            loglevel.controller: info
            loglevel.queueproxy: info
            loglevel.webhook: info
          observability:
            logging.enable-var-log-collection: 'false'
            metrics.backend-destination: prometheus
          tracing:
            enable: 'false'
            sample-rate: '0.1'


# Checking status of the operator
- name: wait for serverless csv to be ready
  shell: "oc get csv -o json -n {{ all_namespaces_project_name }} | jq -r '.items[] | select(.metadata.name | contains(\"{{ serverless_subsription_csv_root }}\")) | .status.phase'"
  register: result
  until: result.stdout == 'Succeeded'
  retries: 30
  delay: 30