---
## Sonarqube Install
- assert:
    that:
      - sonarqube_image_version is version('7.0','>=')
      - sonarqube_image_version is version('8.0','<')
    msg: "This role only supports sonarqube 7 images. Change 'sonarqube_image_version' parameter"

# create project
- name: check if sonarqube project {{ project_name }} exists
  shell: "{{ openshift_cli }} get project {{ project_name }}"
  register: sonarqube_project_result
  ignore_errors: true
  changed_when: false

- name: create nexus project {{ project_name }}
  shell: "{{ openshift_cli }} new-project {{ project_name }} --display-name='{{ project_display_name }}' --description='{{ project_desc }}'"
  when: sonarqube_project_result is failed

- name: assign user as project admin
  shell: "{{ openshift_cli }} adm policy add-role-to-user admin {{ project_admin }} -n {{ project_name }}"
  ignore_errors: true
  when:
    - sonarqube_project_result is failed
    - project_admin is defined
    - project_admin is not none
    - project_admin|trim() != ""

- name: annotate project project {{ project_name }}
  shell: "{{ openshift_cli }} annotate --overwrite namespace {{ project_name }} {{ project_annotations }}"
  ignore_errors: true
  when:
    - sonarqube_project_result is failed
    - project_annotations is defined
    - project_annotations is not none
    - project_annotations|trim() != ""

# deploy sonarqube    
- name: check if sonarqube exists
  shell: "{{ openshift_cli }} get service {{ sonarqube_service_name }} -n {{ project_name }}"
  register: sonarqube_result
  ignore_errors: true
  changed_when: false

- name: deploy nexus template (persistent)
  shell: |
    {{ openshift_cli }} new-app -f https://raw.githubusercontent.com/OpenShiftDemos/sonarqube-openshift-docker/master/sonarqube-template.yaml \
        --param=SONAR_VOLUME_CAPACITY={{ sonarqube_volume_capacity }} \
        --param=SONARQUBE_VERSION={{ sonarqube_image_version }} \
        --param=SONAR_MAX_MEMORY={{ sonarqube_max_memory }} \
        -n {{ project_name }}
  when: sonarqube_result is failed and not ephemeral

- name: deploy nexus template (ephemeral)
  shell: |
    {{ openshift_cli }} new-app -f https://raw.githubusercontent.com/OpenShiftDemos/sonarqube-openshift-docker/master/sonarqube-template.yaml \
        --param=SONARQUBE_VERSION={{ sonarqube_image_version }} \
        --param=SONAR_MAX_MEMORY={{ sonarqube_max_memory }}
        -n {{ project_name }}
    {{ openshift_cli }} set volume dc/sonarqube --name=sonarqube-data --add -t emptyDir --overwrite -n {{ project_name }}
    {{ openshift_cli }} delete pvc sonarqube-data -n {{ project_name }}
  when: sonarqube_result is failed and ephemeral

- name: set nexus resources
  shell: "{{ openshift_cli }} set resources dc/{{ sonarqube_service_name }} --limits=cpu={{ sonarqube_max_cpu }},memory={{ sonarqube_max_memory }} --requests=cpu={{ sonarqube_min_cpu }},memory={{ nexus_min_memory }} -n {{ project_name }}"
  ignore_errors: true

- name: get nexus route
  shell: "{{ openshift_cli }} get route {{ sonarqube_service_name }} -o jsonpath='{ .spec.host }' -n {{ project_name }}"
  register: sonarqube_route_output
  changed_when: false

- set_fact:
    sonarqube_route: "{{ sonarqube_route_output.stdout }}"

- name: wait for sonarqube to be running
  uri:
    url: http://{{ sonarqube_route }}
    status_code: 200
  register: result
  until: result.status == 200
  retries: 30
  delay: 30
