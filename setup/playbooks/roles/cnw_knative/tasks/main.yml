---
## Install

# Deploy Knative Serving using an operator
- name: Create a Subscription of the Knative Serving operator
  k8s:
    state: present
    definition:
      apiVersion: operators.coreos.com/v1alpha1
      kind: Subscription
      metadata:
        name: "{{ knative_serving_subsription_name }}"
        namespace: "{{ all_namespaces_project_name }}"
      spec:
        channel: "{{ knative_serving_subsription_channel }}"
        installPlanApproval: "{{ knative_serving_subsription_install_plan_approval }}"
        name: "{{ knative_serving_subsription_name }}"
        source: "{{ knative_serving_subsription_source }}"
        sourceNamespace: "{{ knative_serving_subsription_source_namespace }}"
        startingCSV: "{{ knative_serving_subsription_starting_csv }}"

# Checking status of the operator
- name: wait for knative serving csv to be ready
  shell: "oc get csv -o json -n {{ all_namespaces_project_name }} | jq -r '.items[] | select(.metadata.name | contains(\"{{ knative_serving_subsription_csv_root }}\")) | .status.phase'"
  register: result
  until: result.stdout == 'Succeeded'
  retries: 30
  delay: 30

# Deploy Knative Eventing using an operator
- name: Create a Subscription of the Knative Eventing operator
  k8s:
    state: present
    definition:
      apiVersion: operators.coreos.com/v1alpha1
      kind: Subscription
      metadata:
        name: "{{ knative_eventing_subsription_name }}"
        namespace: "{{ all_namespaces_project_name }}"
      spec:
        channel: "{{ knative_eventing_subsription_channel }}"
        installPlanApproval: "{{ knative_eventing_subsription_install_plan_approval }}"
        name: "{{ knative_eventing_subsription_name }}"
        source: "{{ knative_eventing_subsription_source }}"
        sourceNamespace: "{{ knative_eventing_subsription_source_namespace }}"
        startingCSV: "{{ knative_eventing_subsription_starting_csv }}"

# Checking status of the operator
- name: wait for knative eventing csv to be ready
  shell: "oc get csv -o json -n {{ all_namespaces_project_name }} | jq -r '.items[] | select(.metadata.name | contains(\"{{ knative_eventing_subsription_csv_root }}\")) | .status.phase'"
  register: result
  until: result.stdout == 'Succeeded'
  retries: 30
  delay: 30