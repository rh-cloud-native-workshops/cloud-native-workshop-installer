---
## Install

# Create project
- name: check if monitoring project {{ project_name }} exists
  shell: "oc get project {{ project_name }}"
  register: monitoring_project_result
  ignore_errors: true
  changed_when: false

- name: create project {{ project_name }}
  shell: "oc new-project {{ project_name }} --display-name='{{ project_display_name }}' --description='{{ project_desc }}'"
  when: monitoring_project_result is failed

- name: assign user as project admin
  shell: "oc adm policy add-role-to-user admin {{ project_admin }} -n {{ project_name }}"
  ignore_errors: true
  when:
    - monitoring_project_result is failed
    - project_admin is defined
    - project_admin is not none
    - project_admin|trim() != ""

- name: annotate project project {{ project_name }}
  shell: "oc annotate --overwrite namespace {{ project_name }} {{ project_annotations }}"
  ignore_errors: true
  when:
    - monitoring_project_result is failed
    - project_annotations is defined
    - project_annotations is not none
    - project_annotations|trim() != ""

# Create the operator group for the namespace
- name: Create Operator Group
  k8s:
    state: present
    definition:
      apiVersion: operators.coreos.com/v1
      kind: OperatorGroup
      metadata:
        name: "monitoring-operator-group"
        generation: 1
        namespace: "{{ project_name }}"
      spec:
        targetNamespaces:
        - "{{ project_name }}"

# Deploy Prometheus using an operator
- name: Create a Subscription of the Prometheus operator
  k8s:
    state: present
    definition:
      apiVersion: operators.coreos.com/v1alpha1
      kind: Subscription
      metadata:
        name: prometheus
        namespace: "{{ project_name }}"
      spec:
        channel: "{{ prometheus_subsription_channel }}"
        installPlanApproval: "{{ prometheus_subsription_install_plan_approval }}"
        name: "{{ prometheus_subsription_name }}"
        source: "{{ prometheus_subsription_source }}"
        sourceNamespace: "{{ prometheus_subsription_source_namespace }}"
        startingCSV: "{{ prometheus_subsription_starting_csv }}"

- name: Create a Prometheus Server CR
  k8s:
    state: present
    definition:
      apiVersion: monitoring.coreos.com/v1
      kind: Prometheus
      metadata:
        name: server
        labels:
          prometheus: k8s
        namespace: "{{ project_name }}"
      spec:
        replicas: 2
        serviceAccountName: prometheus-k8s
        securityContext: {}
        serviceMonitorSelector:
          matchExpressions:
            - key: k8s-app
              operator: Exists
        ruleSelector: {}
        alerting:
          alertmanagers:
            - namespace: openshift-monitoring
              name: alertmanager-main
              port: web

- name: Create a ServiceMonitor CR for "team->backend"
  k8s:
    state: present
    definition:
      apiVersion: monitoring.coreos.com/v1
      kind: Prometheus
      metadata:
        name: server
        labels:
          prometheus: k8s
        namespace: "{{ project_name }}"
      spec:
        replicas: 2
        version: v2.3.2
        serviceAccountName: prometheus-k8s
        securityContext: {}
        serviceMonitorSelector:
          matchExpressions:
            - key: k8s-app
              operator: Exists
        ruleSelector:
          matchLabels:
            role: prometheus-rulefiles
            prometheus: k8s
        alerting:
          alertmanagers:
            - namespace: monitoring
              name: alertmanager-main
              port: web

- name: Create a ServiceMonitor CR for "team->backend"
  k8s:
    state: present
    definition:
      apiVersion: monitoring.coreos.com/v1
      kind: ServiceMonitor
      metadata:
        name: backend-monitor
        labels:
          k8s-app: backend-monitor
        namespace: "{{ project_name }}"
      spec:
        namespaceSelector:
          any: true
        selector:
          matchLabels:
            team: backend
        endpoints:
          - interval: 30s
            port: web

- name: Create a ServiceMonitor CR for "team->spring-boot-actuator"
  k8s:
    state: present
    definition:
      apiVersion: monitoring.coreos.com/v1
      kind: ServiceMonitor
      metadata:
        labels:
          k8s-app: spring-boot-actuator-monitor
        name: spring-boot-actuator-monitor
        namespace: "{{ project_name }}"
      spec:
        endpoints:
          - interval: 30s
            path: /actuator/prometheus
            port: 8080-tcp
        namespaceSelector:
          any: true
        selector:
          matchLabels:
            team: spring-boot-actuator

- name: Adding permission to the Prometheus Operator service account to view Service objects across the cluster
  shell: "oc adm policy add-cluster-role-to-user view system:serviceaccount:{{ project_name }}:prometheus-k8s"

- name: Create a Route for Prometheus Service
  k8s:
    state: present
    definition:
      apiVersion: route.openshift.io/v1
      kind: Route
      metadata:
        labels:
          operated-prometheus: "true"
        name: "{{ prometheus_route_name }}"
        namespace: "{{ project_name }}"
      spec:
        port:
          targetPort: web
        to:
          kind: Service
          name: "{{ prometheus_service_name }}"
          weight: 100
        wildcardPolicy: None


# Deploy Grafana using an operator
- name: Create a Subscription of the Grafana operator
  k8s:
    state: present
    definition:
      apiVersion: operators.coreos.com/v1alpha1
      kind: Subscription
      metadata:
        name: grafana
        namespace: "{{ project_name }}"
      spec:
        channel: "{{ grafana_subsription_channel }}"
        installPlanApproval: "{{ grafana_subsription_install_plan_approval }}"
        name: "{{ grafana_subsription_name }}"
        source: "{{ grafana_subsription_source }}"
        sourceNamespace: "{{ grafana_subsription_source_namespace }}"
        startingCSV: "{{ grafana_subsription_starting_csv }}"

- name: Create a Grafana Server CR
  k8s:
    state: present
    definition:
      apiVersion: integreatly.org/v1alpha1
      kind: Grafana
      metadata:
        name: grafana
        namespace: "{{ project_name }}"
      spec:
        ingress:
          enabled: true
        config:
          auth:
            disable_signout_menu: true
          auth.anonymous:
            enabled: true
          log:
            level: warn
            mode: console
          security:
            admin_password: secret
            admin_user: root
        dashboardLabelSelector:
          - matchExpressions:
              - key: app
                operator: In
                values:
                  - grafana

- name: Create a Grafana Server CR
  k8s:
    state: present
    definition:
      apiVersion: integreatly.org/v1alpha1
      kind: GrafanaDataSource
      metadata:
        finalizers:
          - grafana.cleanup
        name: prometheus-datasource
        namespace: "{{ project_name }}"
      spec:
        datasources:
          - access: proxy
            editable: true
            isDefault: true
            jsonData:
              timeInterval: 5s
            name: Prometheus
            type: prometheus
            url: 'http://prometheus-operated:9090'
            version: 1
        name: prometheus-datasource.yaml

# Checking status of services
- name: get prometheus route
  shell: "oc get route {{ prometheus_route_name }} -o jsonpath='{ .spec.host }' -n {{ project_name }}"
  register: prometheus_route_output
  changed_when: false

- set_fact:
    prometheus_route: "{{ prometheus_route_output.stdout }}"

- name: wait for prometheus to be running
  uri:
    url: http://{{ prometheus_route }}
    status_code: 200
  register: result
  until: result.status == 200
  retries: 30
  delay: 30

- name: get grafana route
  shell: "oc get route {{ grafana_route_name }} -o jsonpath='{ .spec.host }' -n {{ project_name }}"
  register: grafana_route_output
  changed_when: false

- set_fact:
    grafana_route: "{{ grafana_route_output.stdout }}"

- pause:
    minutes: 2

- name: wait for grafana to be running
  uri:
    url: https://{{ grafana_route }}
    status_code: 200
  register: result
  until: result.status == 200
  retries: 30
  delay: 30