- name: cloudnative-workshop-apb playbook to provision the application
  hosts: localhost
  gather_facts: false
  connection: local
  vars:
    openshift_user: 
    openshift_password: 
    openshift_token:
    openshift_master_url: 
    openshift_user_password:
    labs_project_suffix: "-XX"
    labs_guide_name:
    labs_che_guide_name:
    labs_github_account: redhat-developer-adoption-emea
    labs_github_repo: cloud-native-guides
    labs_github_ref: ocp-3.10
    gogs_dev_user: developer
    gogs_pwd: openshift
    infrasvcs_adm_user: adminuser
    infrasvcs_adm_pwd: adminpwd

  roles:
  - role: ansible.kubernetes-modules
    install_python_requirements: no
  - role: ansibleplaybookbundle.asb-modules

  tasks:    
  - name: extract app route suffix from openshift-console
    block:
      - shell: "oc get route console -n openshift-console -o 'jsonpath={.spec.host}'"
        register: console_route
      - set_fact:
          apps_hostname_suffix: "{{ console_route.stdout |regex_replace('^console-openshift-console\\.(.*)$', '\\1') }}"
    tags: always

  - name: delete project quota
    shell: "oc delete limitrange --all -n {{ infra_namespace }}"
    ignore_errors: true
    tags: always

  # Deploy nexus
  - import_role:
      name: openshift_sonatype_nexus
    vars:
      project_name: "{{ infra_namespace }}"
      nexus_image_version: 3.12.1
      nexus_max_memory: 6Gi
    tags: nexus

  # Deploy sonarqube
  - import_role:
      name: ansible_openshift_sonarqube
    vars:
      project_name: "{{ infra_namespace }}"
      sonarqube_image_version: 7.0
      sonarqube_max_memory: 6Gi
    tags: sonarqube

  # deploy guides
  - import_role:
      name: openshift_workshopper
      allow_duplicates: true
    vars:
      workshopper_name: guides
      project_name: "{{ infra_namespace }}"
      workshopper_content_url_prefix: "https://raw.githubusercontent.com/{{ labs_github_account }}/{{ labs_github_repo }}/{{ labs_github_ref }}"
      workshopper_workshop_urls: "https://raw.githubusercontent.com/{{ labs_github_account }}/{{ labs_github_repo }}/{{ labs_github_ref }}/{{ labs_guide_name }}"
      workshopper_env_vars:
        PROJECT_SUFFIX: "{{ labs_project_suffix }}"
        COOLSTORE_PROJECT: coolstore
        OPENSHIFT_CONSOLE_URL: "{{ openshift_master_url }}"
        ECLIPSE_CHE_URL: http://che-{{ workspaces_namespace }}.{{ apps_hostname_suffix }}
        GIT_URL: http://gogs-{{ infra_namespace }}.{{ apps_hostname_suffix }}
        NEXUS_URL: http://nexus-{{ infra_namespace }}.{{ apps_hostname_suffix }}
    tags: guides

  # install openjdk imagestream
  - name: get openjdk image stream
    shell: "oc get is java -n openshift"
    register: java_imagestream_result
    ignore_errors: true
    tags: jdk

  - name: install java image stream
    shell: "oc apply -n openshift -f https://raw.githubusercontent.com/jboss-openshift/application-templates/master/openjdk/openjdk18-image-stream.json"
    when: java_imagestream_result is failed
    tags: jdk

  # update jenkins templates
  - import_role:
      name: openshift_jenkins
    vars:
      update_jenkins_templates: true
      jenkins_template_disable_admin_monitors: true
      deploy_jenkins: false
      jenkins_max_cpu: 2
      jenkins_max_mem: 2Gi
      
  # deploy gogs
  - import_role:
      name: openshift_gogs
    vars:
      project_name: "{{ infra_namespace }}"
      gogs_route: "gogs-{{ infra_namespace }}.{{ apps_hostname_suffix }}"
      gogs_image_version: 0.11.34
      gogs_database_image_version: 10
      gogs_admin_user: "{{ infrasvcs_adm_user }}"
      gogs_admin_password: "{{ infrasvcs_adm_pwd }}"
      gogs_user: "{{ gogs_dev_user }}"
      gogs_password: "{{ gogs_pwd }}"
    tags: gogs

  # deploy monitoring
  - import_role:
      name: cnw_monitoring
    vars:
      project_name: "{{ monitoring_namespace }}"
    tags: monitoring

  # deploy etherpad
  - import_role:
      name: cnw_etherpad
    vars:
      project_name: "{{ etherpad_namespace }}"
    tags: etherpad

  # deploy code ready workspaces
  - import_role:
      name: cnw_workspaces
    vars:
      project_name: "{{ workspaces_namespace }}"
    tags: code-ready-workspaces

  # deploy pipelines
  - import_role:
      name: cnw_pipelines
    tags: tekton

  # deploy serverless
  - import_role:
      name: cnw_knative
    vars:
      project_name: "{{ knative_namespace }}"
    tags: knative
  
  # deploy logging
  - import_role:
      name: cnw_logging
    tags: logging